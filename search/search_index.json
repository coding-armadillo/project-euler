{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Euler","text":""},{"location":"#problem-1-multiples-of-3-or-5","title":"Problem 1 - Multiples of 3 or 5","text":"Solution Python <pre><code># Multiples of 3 or 5\n# Solution 1\nmultiples = []\nfor number in range(1, 1000):\nif number % 5 == 0 or number % 3 == 0:\nmultiples.append(number)\nprint(sum(multiples))\n</code></pre>"},{"location":"#problem-2-even-fibonacci-numbers","title":"Problem 2 - Even Fibonacci numbers","text":"Solution Python <pre><code># Even Fibonacci numbers\n# Solution 1\na, b = 0, 1\nmaximum = 4_000_000\neven_terms = []\nwhile a + b &lt;= maximum:\nfib = a + b\nif fib % 2 == 0:\neven_terms.append(fib)\na, b = b, fib\nprint(sum(even_terms))\n</code></pre>"},{"location":"#problem-3-largest-prime-factor","title":"Problem 3 - Largest prime factor","text":"Solution Python <pre><code># Largest prime factor\n# Solution 1\nimport math\nfrom primePy import primes\nprime = primes.factors(600851475143)\nprint(prime[-1])\n# Solution 2\ndef prime_factors(num):\nlargest_prime_factor = 1\nwhile num % 2 == 0:\nlargest_prime_factor = 2\nnum = num / 2\nfor i in range(3, int(math.sqrt(num)) + 1, 2):\nwhile num % i == 0:\nlargest_prime_factor = i\nnum = num / i\nif num &gt; 2:\nlargest_prime_factor = num\nreturn largest_prime_factor\nnum = 600851475143\nprint(prime_factors(num))\n</code></pre>"},{"location":"#problem-4-largest-palindrome-product","title":"Problem 4 - Largest palindrome product","text":"Solution Python <pre><code># Largest palindrome product\n# Solution 1\npalindromes = []\nproducts = []\nfor i in range(100, 1000):\nfor o in range(100, 1000):\nproducts.append(i * o)\nfor product in products:\nis_palindrome = False\nproduct = str(product)\nreversed_product = []\nfor c in reversed(product):\nreversed_product.append(c)\nreverse = \"\".join(reversed_product)\nif reverse == product:\nis_palindrome = True\nif is_palindrome == True:\npalindromes.append(int(product))\npalindromes.sort()\nprint(palindromes[-1])\n# Solution 2\nnum = 0\npalindromes = []\nfor i in range(100, 1000):\nfor j in range(100, 1000):\nnum = i * j\nif str(num) == str(num)[::-1]:\npalindromes.append(num)\nprint(max(palindromes))\n</code></pre>"},{"location":"#problem-5-smallest-multiple","title":"Problem 5 - Smallest multiple","text":"Solution Python <pre><code># Smallest multiple\n# Solution 1\nfrom collections import Counter\nfrom primePy import primes\ndef find_primes(n):\nprime_factors = Counter()\nfor i in primes.upto(n):\nwhile n % i == 0:\nn /= i\nprime_factors[i] += 1\nreturn prime_factors\nfactors = Counter()\nfor i in range(2, 21):\n_factors = find_primes(i)\nfor p in _factors:\nfactors[p] = max(_factors[p], factors[p])\nans = 1\nfor p in factors:\nans *= p ** factors[p]\nprint(ans)\n# Solution 2\nnum = 200000000\nwhile True:\nj = 1\nfor k in range(2, 21):\nif num % k:\nj = 0\nbreak\nif j == 1:\nprint(num)\nbreak\nnum += 1\n</code></pre>"},{"location":"#problem-6-sum-square-difference","title":"Problem 6 - Sum square difference","text":"Solution Python <pre><code># Sum square difference\n# Solution 1\na = 0\nb = 0\nfor i in range(1, 101):\na = a + pow(i, 2)\nfor i in range(1, 101):\nb = b + i\nb = pow(b, 2)\nprint(b - a)\n</code></pre>"},{"location":"#problem-7-10001st-prime","title":"Problem 7 - 10001st prime","text":"Solution Python <pre><code># 10001st prime\n# Solution 1\nnum = 2\nprimes = []\ndef is_prime(n):\nfor i in range(2, n):\nif (n % i) == 0:\nreturn False\nreturn True\nwhile len(primes) != 10001:\nif is_prime(num) == True:\nprimes.append(num)\nnum = num + 1\nprint(primes[10000])\n# Solution 2\nfrom primePy import primes\na = primes.first(10001)\nprint(a[-1])\n</code></pre>"},{"location":"#problem-8-largest-product-in-a-series","title":"Problem 8 - Largest product in a series","text":"Solution Python <pre><code># Largest product in a series\n# Solution 1\ndigits = []\nproducts = []\nnum = \"\"\"\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n\"\"\"\nnum = num.replace(\"\\n\", \"\")\nfor char in num:\ndigits.append(char)\ndef first_numbers(n):\nfor i in range(1000):\nif i + n &gt; 1000:\nbreak\nproduct = 1\nfor o in range(n):\nproduct *= int(digits[i + o])\nproducts.append(product)\nreturn max(products)\nprint(first_numbers(13))\n</code></pre>"},{"location":"#problem-9-special-pythagorean-triplet","title":"Problem 9 - Special Pythagorean triplet","text":"Solution Python <pre><code># Special Pythagorean triplet\n# Solution 1\nsolved = False\nfor a in range(1, 1000):\nfor b in range(1, 1000 - a):\nc = 1000 - a - b\nif a**2 + b**2 == c**2:\nprint(a * b * c)\nsolved = True\nbreak\nif solved:\nbreak\n</code></pre>"},{"location":"#problem-14-longest-collatz-sequence","title":"Problem 14 - Longest Collatz sequence","text":"Solution Python <pre><code># Longest Collatz sequence\n# Solution 1\nfrom tqdm import tqdm\ndef chain(num):\nitems = 1\nwhile num != 1:\nif num % 2 == 1:\nnum = 3 * num + 1\nelse:\nnum = num / 2\nitems += 1\nreturn items\nmax_items = 0\nn = 0\nfor i in tqdm(range(1, 1000000)):\nitems = chain(i)\nif items &gt; max_items:\nmax_items = items\nn = i\nprint(n)\n</code></pre> <p>Thanks to all 2 contributors.</p>"}]}