{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-euler","title":"Project Euler","text":"<p>Solutions to Project Euler</p>"},{"location":"#problem-1-multiples-of-3-or-5","title":"Problem 1 - Multiples of 3 or 5","text":"Solution Python <pre><code># Multiples of 3 or 5\n\n\n# Solution 1\nmultiples = []\n\nfor number in range(1, 1000):\n    if number % 5 == 0 or number % 3 == 0:\n        multiples.append(number)\n\nprint(sum(multiples))\n</code></pre>"},{"location":"#problem-2-even-fibonacci-numbers","title":"Problem 2 - Even Fibonacci numbers","text":"Solution Python <pre><code># Even Fibonacci numbers\n\n\n# Solution 1\na, b = 0, 1\nmaximum = 4_000_000\n\neven_terms = []\nwhile a + b &lt;= maximum:\n    fib = a + b\n    if fib % 2 == 0:\n        even_terms.append(fib)\n    a, b = b, fib\n\nprint(sum(even_terms))\n</code></pre>"},{"location":"#problem-3-largest-prime-factor","title":"Problem 3 - Largest prime factor","text":"Solution Python <pre><code># Largest prime factor\n\n\n# Solution 1\nimport math\n\nfrom primePy import primes\n\nprime = primes.factors(600851475143)\nprint(prime[-1])\n\n\n# Solution 2\ndef prime_factors(num):\n    largest_prime_factor = 1\n    while num % 2 == 0:\n        largest_prime_factor = 2\n        num = num / 2\n\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            largest_prime_factor = i\n            num = num / i\n    if num &gt; 2:\n        largest_prime_factor = num\n\n    return largest_prime_factor\n\n\nnum = 600851475143\nprint(prime_factors(num))\n</code></pre>"},{"location":"#problem-4-largest-palindrome-product","title":"Problem 4 - Largest palindrome product","text":"Solution Python <pre><code># Largest palindrome product\n\n\n# Solution 1\npalindromes = []\nproducts = []\n\nfor i in range(100, 1000):\n    for o in range(100, 1000):\n        products.append(i * o)\n\nfor product in products:\n    is_palindrome = False\n    product = str(product)\n    reversed_product = []\n    for c in reversed(product):\n        reversed_product.append(c)\n    reverse = \"\".join(reversed_product)\n    if reverse == product:\n        is_palindrome = True\n\n    if is_palindrome == True:\n        palindromes.append(int(product))\n\npalindromes.sort()\nprint(palindromes[-1])\n\n\n# Solution 2\nnum = 0\npalindromes = []\nfor i in range(100, 1000):\n    for j in range(100, 1000):\n        num = i * j\n        if str(num) == str(num)[::-1]:\n            palindromes.append(num)\nprint(max(palindromes))\n</code></pre>"},{"location":"#problem-5-smallest-multiple","title":"Problem 5 - Smallest multiple","text":"Solution Python <pre><code># Smallest multiple\n\n\n# Solution 1\nfrom collections import Counter\n\nfrom primePy import primes\n\n\ndef find_primes(n):\n    prime_factors = Counter()\n    for i in primes.upto(n):\n        while n % i == 0:\n            n /= i\n            prime_factors[i] += 1\n    return prime_factors\n\n\nfactors = Counter()\nfor i in range(2, 21):\n    _factors = find_primes(i)\n    for p in _factors:\n        factors[p] = max(_factors[p], factors[p])\n\nans = 1\nfor p in factors:\n    ans *= p ** factors[p]\n\nprint(ans)\n\n\n# Solution 2\nnum = 200000000\nwhile True:\n    j = 1\n    for k in range(2, 21):\n        if num % k:\n            j = 0\n            break\n    if j == 1:\n        print(num)\n        break\n    num += 1\n</code></pre>"},{"location":"#problem-6-sum-square-difference","title":"Problem 6 - Sum square difference","text":"Solution Python <pre><code># Sum square difference\n\n\n# Solution 1\na = 0\nb = 0\n\nfor i in range(1, 101):\n    a = a + pow(i, 2)\n\nfor i in range(1, 101):\n    b = b + i\nb = pow(b, 2)\n\nprint(b - a)\n</code></pre>"},{"location":"#problem-7-10001st-prime","title":"Problem 7 - 10001st prime","text":"Solution Python <pre><code># 10001st prime\n\n\n# Solution 1\nnum = 2\nprimes = []\n\n\ndef is_prime(n):\n    for i in range(2, n):\n        if (n % i) == 0:\n            return False\n    return True\n\n\nwhile len(primes) != 10001:\n    if is_prime(num) == True:\n        primes.append(num)\n    num = num + 1\nprint(primes[10000])\n\n\n# Solution 2\nfrom primePy import primes\n\na = primes.first(10001)\nprint(a[-1])\n</code></pre>"},{"location":"#problem-8-largest-product-in-a-series","title":"Problem 8 - Largest product in a series","text":"Solution Python <pre><code># Largest product in a series\n\n\n# Solution 1\ndigits = []\nproducts = []\n\nnum = \"\"\"\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n\"\"\"\nnum = num.replace(\"\\n\", \"\")\n\nfor char in num:\n    digits.append(char)\n\n\ndef first_numbers(n):\n    for i in range(1000):\n        if i + n &gt; 1000:\n            break\n\n        product = 1\n        for o in range(n):\n            product *= int(digits[i + o])\n\n        products.append(product)\n\n    return max(products)\n\n\nprint(first_numbers(13))\n</code></pre>"},{"location":"#problem-9-special-pythagorean-triplet","title":"Problem 9 - Special Pythagorean triplet","text":"Solution Python <pre><code># Special Pythagorean triplet\n\n\n# Solution 1\nsolved = False\n\nfor a in range(1, 1000):\n    for b in range(1, 1000 - a):\n        c = 1000 - a - b\n        if a**2 + b**2 == c**2:\n            print(a * b * c)\n            solved = True\n            break\n    if solved:\n        break\n</code></pre>"},{"location":"#problem-14-longest-collatz-sequence","title":"Problem 14 - Longest Collatz sequence","text":"Solution Python <pre><code># Longest Collatz sequence\n\n\n# Solution 1\nfrom tqdm import tqdm\n\n\ndef chain(num):\n    items = 1\n    while num != 1:\n        if num % 2 == 1:\n            num = 3 * num + 1\n        else:\n            num = num / 2\n        items += 1\n    return items\n\n\nmax_items = 0\nn = 0\n\nfor i in tqdm(range(1, 1000000)):\n    items = chain(i)\n    if items &gt; max_items:\n        max_items = items\n        n = i\n\nprint(n)\n</code></pre> <p>Thanks to all 2 contributors.</p>"}]}